package com.xueersi.parentsmeeting.modules.livevideo.business;

import android.app.Activity;
import android.content.Context;
import android.graphics.Color;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.media.Image;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.TextPaint;
import android.text.TextUtils;
import android.text.style.ForegroundColorSpan;
import android.text.style.ImageSpan;
import android.text.style.StyleSpan;
import android.text.style.TextAppearanceSpan;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.xueersi.parentsmeeting.http.HttpCallBack;
import com.xueersi.parentsmeeting.http.ResponseEntity;
import com.xueersi.parentsmeeting.modules.livevideo.R;
import com.xueersi.parentsmeeting.modules.livevideo.activity.LiveVideoActivity;
import com.xueersi.parentsmeeting.modules.livevideo.http.LiveHttpManager;
import com.xueersi.parentsmeeting.modules.livevideo.widget.SlowHorizontalScrollView;
import com.xueersi.parentsmeeting.modules.loginregisters.business.UserBll;
import com.xueersi.parentsmeeting.sharedata.ShareDataManager;
import com.xueersi.xesalib.utils.log.Loger;
import com.xueersi.xesalib.utils.uikit.ScreenUtils;
import com.xueersi.xesalib.utils.uikit.SizeUtils;
import com.xueersi.xesalib.utils.uikit.imageloader.ImageLoader;

import org.json.JSONObject;

import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Created by Tang on 2018/3/10.
 */

public class LiveAutoNoticeBll {
    private Context mContext;
    private int videoWidth;
    private int displayHeight;
    private int displayWidth;
    private int wradio;
    private View root;
    private SlowHorizontalScrollView mSlowHorizontalScrollView;
    private View vLeft, vRight;
    private ImageView ivAvatar;
    private TextView tvContent;
    private RelativeLayout bottom;
    private boolean isShowing;
    private LiveHttpManager mHttpManager;
    private String classId;
    private String testId;
    private String srcType;
    private String teacherName;
    private String teacherImg;
    private String liveId;
    private LiveBll mLiveBll;
    private Runnable mRunnable;
    String TAG = this.getClass().getSimpleName();
    Pattern pattern=Pattern.compile("#[0-9]#");
    String[] emojis={"\uD83D\uDE22","\uD83D\uDE44","\uD83D\uDE31","\uD83D\uDE02","\uD83D\uDE15"};
    //int[] emoji={R.drawable.live_emoji_1,R.drawable.live_emoji_2,R.drawable.live_emoji_3};
    /**
     * ÊñáÊ°à
     */
    String[] notice={"‰∏çË¶ÅÂú®‰∏äËØæÊúüÈó¥ÂèëË°®‰∏çÂêàÈÄÇÁöÑË®ÄËÆ∫„ÄÇ",
            "Á¶ÅÊ≠¢ËÑèËØùÂèäÊïèÊÑüËØçÊ±áÔºå‰Ω†‰ºöË¢´Á¶ÅË®Ä„ÄÇ",
            "Â∞¥Â∞¨‰∫ÜÔºåÊàë‰ºöÊî∂Âà∞‰Ω†ÂèëÁöÑË¢´Â±èËîΩÁöÑÁïôË®ÄÔºå‰Ω†ËøòË¶ÅÂèëÂêóÔºü",
            "‰Ω†ÈúÄË¶ÅÊâæÊàëËÅäËÅä‰∫∫Áîü‰∫Ü„ÄÇ"};
    /*String[][] notice = {{"‰Ω†‰∏ç‰ºöÊòØÊâãÊäñËæìÈîô‰∫ÜÂêßÔºüÊçÆ‰º†ËØ¥ÈõÜ‰∏≠Á≤æÁ•ûÂê¨ËØæËÉΩÊ≤ªÁñóÊâãÊäñÔºå‰∏ç‰ø°‰Ω†ËØïËØï!",
            "‰Ω†ÁªùÂØπÊòØÊïÖÊÑèÁöÑ\uD83D\uDE22ÔºàÂì≠ËÑ∏ÔºâÔºåÈîô‰∫Ü‰∏çË¶ÅÁ¥ßÔºåËÄÅÂ∏àËÆ≤ÂêéÊáÇ‰∫ÜÂ∞±ÊòØÂ•ΩÊ†∑ÁöÑ„ÄÇÊàë‰ºöÂÖ≥Ê≥®‰Ω†ÁöÑÂì¶.",
            "ÁúãÊù•Ëøô‰∏™Áü•ËØÜÁÇπ‰Ω†ÊéåÊè°ÁöÑ‰∏çÊòØÂæàÁâ¢Âõ∫ÂïäÔºåËÆ∞Âæó‰∏ãËØæÁúãÂõûÊîæ„ÄÇ"
    }, {"‰Ω†ÊòØÂ¶Ç‰ΩïÂÅöÂà∞Áî®È£û‰∏ÄÊ†∑ÁöÑÈÄüÂ∫¶ÂÅöÈîôÁöÑÔºü\uD83D\uDE44",
            "Ê≠£Á°ÆÁéáÊâçÊòØÊúÄÈáçË¶ÅÁöÑ„ÄÇÂè™ËøΩÊ±ÇÂø´ÊòØÊó†ÊÑè‰πâÁöÑ„ÄÇÈªòËØª‰∏âÈÅçÔºåËÆ∞Âú®ÂøÉÈó¥„ÄÇ",
            "ËøòÊòØË¶ÅËÆ§ÁúüÂÆ°È¢òÔºåÂÅöÂÆåÊ£ÄÊü•„ÄÇÊâçËÉΩÈÅøÂÖçËøôÁßçÂæàÂø´Èîô‰∫ÜÁöÑÊÇ≤Ââß„ÄÇ",
            "Êàê‰∏∫ÊúÄÂø´ÂÅöÈîôÁöÑÂêåÂ≠¶Ôºå‰Ω†ÁúüÁöÑÂºÄÂøÉÂêóÔºü\uD83D\uDE31",
            "‰Ω†ÊòØÂ¶Ç‰ΩïÂÅöÂà∞ËøûÁª≠5Ê¨°Êàê‰∏∫ÊúÄÂø´ÂÅöÈîôÁöÑÂêåÂ≠¶ÁöÑ„ÄÇ‰Ω†‰πüÂ§™ÂéâÂÆ≥‰∫Ü„ÄÇ",
            "\uD83D\uDE44\uD83D\uDE44\uD83D\uDE44‰Ω†ÊòØÊ†πÊú¨Ê≤°ÊúâÁî®ÂøÉÂÅöÈ¢òÂêß„ÄÇ‰∏ãËØæ‰Ω†ÈúÄË¶ÅÂíåÊàëËÅäËÅä‰∫Ü„ÄÇ"
    }, {"ÂÖàË∑ü‰∏äËÄÅÂ∏àËÆ≤ËØæÁöÑËäÇÂ•èÔºåÊ≤°Âê¨ÊáÇÁöÑÂÖàÊ†áËÆ∞‰∏ãÔºå‰∏ãËØæÂÜçÈóÆÂì¶„ÄÇ",
            "ÁúãÊù•‰ªäÂ§©‰Ω†Áä∂ÊÄÅ‰∏ç‰Ω≥ÔºåÊçÆËØ¥Â•ΩÂ•ΩÂê¨ËØæËÉΩÊèêÂçáÁä∂ÊÄÅÂÄºÔºå‰Ω†ËØïËØïÁúã„ÄÇ",
            "‰Ω†Ëøô‰∏ç‰ªÖÊòØÁä∂ÊÄÅ‰∏ç‰Ω≥‰∫ÜÔºåÂèØËÉΩËøêÊ∞î‰πü‰∏ç‰Ω≥Âïä\uD83D\uDE02 ÔºåÂùöÊåÅÂê¨ËØæËøòÊúâÊïëÁöÑ„ÄÇ",
            "‰Ω†‰ªäÂ§©ÁöÑ‰∫íÂä®È¢òÊ≠£Á°ÆÁéáÂ∑≤ÁªèÂ§©‰∏ãÊó†Êïå‰∫ÜÔºå‰∏ãËØæÁúãÂõûÊîæÔºåÈóÆÊàëÈ¢òÂêßÔºåÊàë‰∏çÂ´åÂºÉ‰Ω†ÔºåÂøÉÁñºÁöÑÊä±Êä±„ÄÇ"
    }, {"‰Ω†ÈÉΩÂÖ®ÂØπ‰∫ÜÔºå‰∏∫‰ªÄ‰πà‰∏ç‰∏ªÂä®Êèê‰∫§Âë¢„ÄÇÊàëÁåú‰Ω†ÊòØÊâæ‰∏çÂà∞Êèê‰∫§ÈîÆÔºåÂòªÂòªüòÅ„ÄÇ",
            "‰Ω†ËøòÊ≤°ÊâæÂà∞Êèê‰∫§ÈîÆÂêóÔºüË¶ÅÂú®ÁªìÊùüÂâç‰∏ªÂä®Êèê‰∫§„ÄÇÁõ∏‰ø°Ëá™Â∑±Âì¶„ÄÇ",
            "‰∏ãÊ¨°‰∏ªÂä®Êèê‰∫§ÂêßÔºåÈîô‰∫Ü‰πüÊ≤°ÂÖ≥Á≥ª„ÄÇ‰Ω†Ë¶ÅÁõ∏‰ø°Ëá™Â∑±Èîô‰∫Ü‰πüËÉΩÊîπÂØπ„ÄÇ",
            "ÂÅöÂØπ‰∫Ü‰πü‰∏çÊèê‰∫§ÔºåÁúãÊù•‰Ω†ÊòØÊïÖÊÑè‰∏çËÆ©ËÄÅÂ∏àË°®Êâ¨‰Ω†„ÄÇ\uD83D\uDE02"
    }, {"Èîô‰∫ÜÊ≤°ÂÖ≥Á≥ªÔºåÂãá‰∫éÈù¢ÂØπËá™Â∑±ÁöÑÈóÆÈ¢òÊòØÊõ¥ÂèØË¥µÁöÑÁ≤æÁ•ûÔºå‰∏ãÊ¨°‰∏ªÂä®Êèê‰∫§Âì¶„ÄÇ",
            "Âú®‰Ω†ÁäπË±´ÁöÑÊó∂ÂàªÔºåÊòØ‰∏çÊòØÊó∂Èó¥Â∞±Âà∞‰∫ÜÔºü‰∏ãÂõû‰∏çË¶ÅÁäπË±´Âï¶„ÄÇ\uD83D\uDE02",
            "Â•ΩÂêßÔºå‰Ω†ËøòÊòØÁäπË±´‰∫ÜÔºåÊòØ‰∏çÊòØ‰Ω†ÂØπËøô‰∏™Áü•ËØÜÁÇπÁöÑÊéåÊè°‰∏çÂ§üÊâéÂÆûÂë¢Ôºü",
            "ËÄÅÂ∏àËÆ§‰∏∫ÔºåÂãá‰∫éÂ∞ùËØïÔºåÈîô‰∫ÜÁúüÁöÑÊ≤°ÂÖ≥Á≥ªÔºåÊØïÁ´ü‰Ω†ÊòØËÆ§ÁúüÂ≠¶‰∫ÜÁöÑÔºåÂä†Ê≤πÔºÅ"
    }, {"ÊòØ‰∏çÊòØÁΩëÁªúÈóÆÈ¢òÂØºËá¥‰Ω†‰∏çËÉΩ‰∏ªÂä®Êèê‰∫§ÔºüÂà∑Êñ∞ÔºåÈÄÄÂá∫ÈáçËøõÈÉΩÊòØËß£ÂÜ≥Â•ΩÂäûÊ≥ï„ÄÇ",
            "ÊòØÊó∂Èó¥Êù•‰∏çÊÄ•‰∫ÜÂêóÔºü‰∏ãÂõûÊèêÈ´òÂÅöÈ¢òÈÄüÂ∫¶Âì¶„ÄÇ",
            "‰Ω†ÂèàÊ≤°Êèê‰∫§\uD83D\uDE02 ÔºåÊòØ‰∏çÊòØÁúüÁöÑÊ≤°ÂÅöÂÆåÂïäÔºå‰∏ãÂõûÂÅöÂ§öÂ∞ë‰∫§Â§öÂ∞ë„ÄÇ",
            "‰∏çÊï¢Êèê‰∫§ÁöÑÂéüÂõ†ÔºåÊúâÊ≤°Êúâ‰∏Ä‰∏¢‰∏¢ÊòØ‰∏ç‰ºöÂë¢ÔºüÂ¶ÇÊûúÊúâÔºåÁúãÂõûÊîæÔºåÈóÆËÄÅÂ∏à„ÄÇ"
    }, {}, {"ÊòØÁΩëÁªúÈóÆÈ¢òÊî∂‰∏çÂà∞‰∫íÂä®È¢òÂêóÔºüÂà∑Êñ∞ÊàñÈÄÄÂá∫ÈáçËøõËØïËØïÁúãÔºåÂ¶ÇÊûúÈÉΩ‰∏çË°åÔºåËÅîÁ≥ªÊàë„ÄÇ",
            "Â¶ÇÊûú‰∏çÊòØÁΩëÁªúÈóÆÈ¢òÔºåÈÇ£Â∞±ÊòØ‰Ω†ÁöÑÈóÆÈ¢ò‰∫ÜÔºåËÆ§ÁúüÂê¨ËØæÂíåÂÅöÈ¢òÔºåÊàë‰ºöÂÖ≥Ê≥®‰Ω†ÁöÑ„ÄÇ",
            "ÂÅöÈîô‰∏çÂèØÊÄïÔºåÂèØÊÄïÁöÑÊòØ‰∏çÂÅöÔºåÊÄÅÂ∫¶‰∏çÁ´ØÊ≠£ÔºåÊÄé‰πàÈÄÜË¢≠Âë¢Ôºü",
            "‰ªäÂ§©Êù•‰∫Ü‰∏Ä‰∏™ÂÅáÁöÑ‰Ω†ÂêßÔºüÂõõÈÅìÈ¢ò‰∏çÂÅö„ÄÇÁúãÂï¶‰Ω†ÈúÄË¶Å‰∏ãËØæÊâæÊàë‰∫Ü„ÄÇ"
    }, {"‰Ω†Â§™Áâõ‰∫ÜÔºåËøôÈ¢òÁöÑÊ≠£Á°ÆÁéáËøò‰∏çÂà∞30%Ôºå‰ΩÜÊòØ‰Ω†ÂÅöÂØπ‰∫Ü„ÄÇ",
            "‰∏§Ê¨°‰∫ÜÔºåÊ≠£Á°ÆÁéáÈÇ£‰πà‰ΩéÔºå‰ΩÜÊòØ‰Ω†Â∞±ÊòØËÉΩÂÅöÂØπÔºåÁúãÊù•Âü∫Êú¨ÂäüÊâéÂÆû„ÄÇ",
            "ÂéâÂÆ≥‰∫ÜÔºåÊàëÁöÑÂ®ÉÔºåÊö¥Âáª3Ê¨°‰ΩéÊ≠£Á°ÆÁéá„ÄÇ",
            "ËÄÅÂ∏àÂ∑≤ÁªèÂºÄÂßãËÜúÊãú‰Ω†ÁöÑËÉΩÂäõ‰∫ÜÔºåÊö¥Âáª4Ê¨°‰ΩéÊ≠£Á°ÆÁéá„ÄÇ"
    }, {"Áä∂ÊÄÅ‰∏çÈîôÔºåÁ¥ØËÆ°ÂÅöÂØπÂ§öÈÅìÈ¢ò‰∫ÜÔºåÁªßÁª≠Âä†Ê≤πÔºÅ",
            "Á¥ØËÆ°ÂÅöÂØπÁöÑÈ¢òÁõÆÂèàÂ§ö‰∫ÜÔºåÁúãÁúã‰Ω†ËÉΩ‰∏çËÉΩÂàõÈÄ†Êõ¥Â•ΩÁöÑËÆ∞ÂΩï„ÄÇ",
            "ÂéâÂÆ≥‰∫ÜÔºåÊàëÁöÑÂ®ÉÔºåÁ¥ØËÆ°Â§öÈÅìÈ¢òÁõÆÂÖ®ÂØπgetÔºå‰Ω†ÊòØÊàëÁöÑÂ∞èÈ™ÑÂÇ≤„ÄÇ",
            "Âá†‰πéÂÖ®ÈÉ®È¢òÁõÆÈÉΩÂØπÁöÑÂ®ÉÔºåËÜúÊãú‰∏≠ÔΩûÁªô‰Ω†‰∏™ÁâπÊÆäÂ§ßÂ§ßÁöÑË°®Êâ¨„ÄÇ"
    }, {"‰∏çË¶ÅÂú®‰∏äËØæÊúüÈó¥ÂèëË°®‰∏çÂêàÈÄÇÁöÑË®ÄËÆ∫„ÄÇ",
            "Á¶ÅÊ≠¢ËÑèËØùÂèäÊïèÊÑüËØçÊ±áÔºå‰Ω†‰ºöË¢´Á¶ÅË®Ä„ÄÇ",
            "Â∞¥Â∞¨‰∫ÜÔºåÊàë‰ºöÊî∂Âà∞‰Ω†ÂèëÁöÑË¢´Â±èËîΩÁöÑÁïôË®ÄÔºå‰Ω†ËøòË¶ÅÂèëÂêóÔºü",
            "‰Ω†ÈúÄË¶ÅÊâæÊàëËÅäËÅä‰∫∫Áîü‰∫Ü„ÄÇ"
    }};*/

    public LiveAutoNoticeBll(Context context, RelativeLayout bottom) {
        this.mContext = context;
        this.bottom = bottom;
        setLayout(1920, 1080);

    }

    public void setLayout(int width, int height) {
        int screenWidth = getScreenParam();
        displayHeight = height;
        displayWidth = screenWidth;
        if (width > 0) {
            wradio = (int) (LiveVideoActivity.VIDEO_HEAD_WIDTH * width / LiveVideoActivity.VIDEO_WIDTH);
            wradio += (screenWidth - width) / 2;
            if (displayWidth - wradio == videoWidth) {
                return;
            } else {
                videoWidth = displayWidth - wradio;
            }
        }
    }

    private int getScreenParam() {
        final View contentView = ((Activity) mContext).findViewById(android.R.id.content);
        final View actionBarOverlayLayout = (View) contentView.getParent();
        Rect r = new Rect();
        actionBarOverlayLayout.getWindowVisibleDisplayFrame(r);
        return (r.right - r.left);
    }

    public void setBottom(RelativeLayout bottom) {
        this.bottom = bottom;
    }


    public void setClassId(String classId) {
        this.classId = classId;
    }

    public void setTestId(String testId) {
        this.testId = testId;
    }

    public void setSrcType(String srcType) {
        this.srcType = srcType;
    }

    public void setTeacherName(String teacherName) {
        this.teacherName = teacherName;
    }

    public void setLiveId(String liveId) {
        this.liveId = liveId;
    }

    public void setTeacherImg(String teacherImg) {
        this.teacherImg = teacherImg;
    }

    public void setLiveBll(LiveBll liveBll) {
        mLiveBll = liveBll;
    }

    public void setHttpManager(LiveHttpManager httpManager) {
        mHttpManager = httpManager;
    }

    /**
     * ÊïèÊÑüËØçÊèêÁ§∫
     *
     * @param name
     * @param head
     */
    public void showNotice(String name, String head) {
        try {
            if (Integer.parseInt(classId) < 0) {
                return;
            }
            int i = ShareDataManager.getInstance().getInt("LiveAutoNotice_" + liveId, -1, ShareDataManager.SHAREDATA_USER);
            showNotice(name, notice[(i + 1) % 4], head);
            //showNotice(name,parseEmoji("‰∏çË¶Å#1#ËØ¥#2#ËÑèËØùÂì¶#3###"),head);
            umsAgent(3, true);
            ShareDataManager.getInstance().put("LiveAutoNotice_" + liveId, i + 1, ShareDataManager.SHAREDATA_USER);
            mHttpManager.autoNoticeStatisc(classId, new HttpCallBack(false) {
                @Override
                public void onPmSuccess(ResponseEntity responseEntity) throws Exception {
                    umsAgentReq(true);
                }

                @Override
                public void onPmFailure(Throwable error, String msg) {
                    super.onPmFailure(error, msg);
                    umsAgentReq(false);
                }

                @Override
                public void onPmError(ResponseEntity responseEntity) {
                    super.onPmError(responseEntity);
                    umsAgentReq(false);
                }
            });
            //showNotice(name, notice[1][0], head);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * ÊòæÁ§∫Êô∫ËÉΩÁßÅ‰ø°
     *
     * @param name
     * @param s
     * @param head
     */
    public void showNotice(String name, CharSequence s, String head) {
//         if (isShowing) {
//            return;
//        }
//        isShowing = true;
        if(mRunnable==null){
            mRunnable=new Runnable() {
                @Override
                public void run() {
                    bottom.removeView(root);
                    isShowing=false;
                }
            };
        }
        try {
            if (root == null) {
                root = View.inflate(mContext, R.layout.layout_live_auto_notice, null);
                mSlowHorizontalScrollView = (SlowHorizontalScrollView) root.findViewById(R.id.sv_live_auto_notice);
                vLeft = root.findViewById(R.id.v_live_auto_notice_left);
                vRight = root.findViewById(R.id.v_live_auto_notice_right);
                ivAvatar = (ImageView) root.findViewById(R.id.iv_live_auto_notice_avatar);
                tvContent = (TextView) root.findViewById(R.id.tv_live_auto_notice_content);
            }
            ImageLoader.with(mContext).load(head).error(R.drawable.ic_default_head_square).into(ivAvatar);
            SpannableString content = new SpannableString(name + "@‰Ω†  " + s);
            StyleSpan span = new StyleSpan(Typeface.BOLD);
            try {
                content.setSpan(span, 0, name.length() + 2, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
            } catch (Exception e) {
                e.printStackTrace();
            }
            tvContent.setText(content);
            RelativeLayout.LayoutParams rootParam = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            rootParam.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
            rootParam.setMargins(0, 0, 0, 40);
            if(!isShowing) {
                bottom.addView(root, 1, rootParam);
                isShowing = true;
            }
            LinearLayout.LayoutParams svParam = new LinearLayout.LayoutParams(videoWidth, ViewGroup.LayoutParams.WRAP_CONTENT);
            mSlowHorizontalScrollView.setLayoutParams(svParam);
            LinearLayout.LayoutParams vParam = new LinearLayout.LayoutParams(videoWidth, 1);
            vLeft.setLayoutParams(vParam);
            vRight.setLayoutParams(vParam);
            TextPaint paint = new TextPaint();
            paint.setTextSize(SizeUtils.Dp2Px(mContext, 12));
            int tvWidth = (int) paint.measureText(content.toString());
            LinearLayout.LayoutParams tvParam = new LinearLayout.LayoutParams(tvWidth + 40, ViewGroup.LayoutParams.WRAP_CONTENT);
            tvParam.setMargins(10, 0, 0, 0);
            tvContent.setLayoutParams(tvParam);
            tvContent.setSingleLine();
            mSlowHorizontalScrollView.setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View v, MotionEvent event) {
                    return true;
                }
            });
            mSlowHorizontalScrollView.setHorizontalScrollBarEnabled(false);
            mSlowHorizontalScrollView.scrollTo(0, 0);
            int last = Math.max(videoWidth, tvWidth) * 4;
            mSlowHorizontalScrollView.smoothScrollToSlow(videoWidth + tvWidth + 200, 0, last);
            mSlowHorizontalScrollView.getHandler().removeCallbacks(mRunnable);
            mSlowHorizontalScrollView.postDelayed(mRunnable, last);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Ëé∑ÂèñÊô∫ËÉΩÁßÅ‰ø°
     *
     * @param isForce
     * @param type
     */
    public void getAutoNotice(int isForce, int type) {
        Loger.i(TAG, "getAutoNotice");
        try {
            if (Integer.parseInt(classId) < 0) {
                return;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        mHttpManager.getAutoNotice(classId, testId, srcType, type, isForce, new HttpCallBack(false) {
            @Override
            public void onPmSuccess(ResponseEntity responseEntity) throws Exception {
                try {
                    JSONObject object = (JSONObject) responseEntity.getJsonObject();
                    Loger.i(TAG, "getAutoNotice success" + object.toString());

                    int type = object.optInt("type", -1);
                    int choose = object.optInt("choose", -1);
                    String content=object.optString("text");
//                    String name = object.optString("teacherName", teacherName);
//                    String imgUrl = object.optString(teacherImg);
                    if (!TextUtils.isEmpty(content) && !TextUtils.isEmpty(teacherName)) {
                        showNotice(teacherName, parseEmoji(content), teacherImg);
                        umsAgent(type, true);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onPmFailure(Throwable error, String msg) {
                super.onPmFailure(error, msg);
                Loger.i(TAG, "getAutoNotice fail" + msg);
                umsAgent(0, false);
                //showNotice("ËÄÅÂ∏à",notice[1][1],"");
            }

            @Override
            public void onPmError(ResponseEntity responseEntity) {
                super.onPmError(responseEntity);
                Loger.i(TAG, "getAutoNotice fail" + responseEntity.getErrorMsg());
                umsAgent(0, false);
                //showNotice("ËÄÅÂ∏à",notice[1][1],"");
            }
        });
    }

    /**
     * Êô∫ËÉΩÁßÅ‰ø°Êó•Âøó
     * @param type
     * @param isSuccess
     */
    private void umsAgent(int type, boolean isSuccess) {
        HashMap<String, String> map = new HashMap<>();
        map.put("testid", testId);
        if (isSuccess) {
            map.put("chattexttype", "" + type);
            //map.put("chattextnum", "" + choose);
            if (type == 1) {
                map.put("whisperreq", "success");
                map.put("actiontype", "whisperpraise");
            } else if (type == 0) {
                map.put("actiontype", "whisperencourage");
                map.put("whisperreq", "success");
            } else if (type == 3) {
                map.put("actiontype", "whisperwarning");
                map.put("whisperwarntime", "" + System.currentTimeMillis());
            }
        } else {
            map.put("whisperreq", "fail");
        }
        mLiveBll.umsAgentDebug3("sci_whisper_func", map);
    }
    private CharSequence parseEmoji(String src){
        Matcher matcher=pattern.matcher(src);
        SpannableString sp=new SpannableString(src);
        while (matcher.find()){
            String s=matcher.group(0);
            int e=Integer.parseInt(s.replaceAll("#",""));
            if(e>0&&e<6){
//                ImageSpan span=new ImageSpan(mContext.getResources().getDrawable(emoji[e]));
//                sp.setSpan(span,matcher.start(),matcher.end(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                src=src.replaceAll(s,emojis[e]);
            }else{
                src=src.replaceAll(s,"");
            }
        }
        return src;
    }
    /**ËÑèËØçÂÖ•Â∫ìËØ∑Ê±ÇÊó•Âøó*/
    private void umsAgentReq(boolean isSuccess){
        HashMap<String,String> map=new HashMap<>();
        map.put("chattexttype","11");
        map.put("whisperwarningreq",isSuccess?"success":"fail");
        mLiveBll.umsAgentDebug3("sci_whisper_func",map);
    }
}
